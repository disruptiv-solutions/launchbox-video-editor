name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: write           # MAXIMUM: Create branches, commits, pushes, tags, releases
      pull-requests: write      # MAXIMUM: Create, edit, comment on PRs
      issues: write            # MAXIMUM: Create, edit, comment on issues  
      discussions: write       # MAXIMUM: Participate in discussions
      repository-projects: write # MAXIMUM: Manage project boards
      packages: write          # MAXIMUM: Manage packages
      pages: write             # MAXIMUM: Manage GitHub Pages
      deployments: write       # MAXIMUM: Manage deployments
      id-token: write          # REQUIRED: For OIDC
      actions: read           # MAXIMUM: Read workflow runs and CI results
      checks: write           # MAXIMUM: Create and update check runs
      statuses: write         # MAXIMUM: Create commit statuses
      security-events: write  # MAXIMUM: Manage security events
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch ALL history and ALL branches
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git with Maximum Access
        run: |
          git config --global user.name "claude-bot[bot]"
          git config --global user.email "claude-bot[bot]@users.noreply.github.com"
          git config --global init.defaultBranch main
          git config --global pull.rebase false
          git config --global push.autoSetupRemote true

      - name: Run Claude Code with AMAZING RIGHTS
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Maximum permissions for Claude to read CI results and more
          additional_permissions: |
            actions: read
            checks: write
            statuses: write
          
          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"
          
          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"
          
          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"
          
          # MAXIMUM TOOLS - Complete development environment access
          allowed_tools: |
            Bash(git *),
            Bash(gh *),
            Bash(npm *),
            Bash(yarn *),
            Bash(pnpm *),
            Bash(npx *),
            Bash(node *),
            Bash(python *),
            Bash(python3 *),
            Bash(pip *),
            Bash(pip3 *),
            Bash(curl *),
            Bash(wget *),
            Bash(ls *),
            Bash(cat *),
            Bash(echo *),
            Bash(printf *),
            Bash(mkdir *),
            Bash(rmdir *),
            Bash(rm *),
            Bash(cp *),
            Bash(mv *),
            Bash(ln *),
            Bash(find *),
            Bash(grep *),
            Bash(egrep *),
            Bash(sed *),
            Bash(awk *),
            Bash(sort *),
            Bash(uniq *),
            Bash(head *),
            Bash(tail *),
            Bash(wc *),
            Bash(cut *),
            Bash(tr *),
            Bash(chmod *),
            Bash(chown *),
            Bash(touch *),
            Bash(file *),
            Bash(stat *),
            Bash(du *),
            Bash(df *),
            Bash(ps *),
            Bash(top *),
            Bash(htop *),
            Bash(which *),
            Bash(whereis *),
            Bash(type *),
            Bash(env *),
            Bash(export *),
            Bash(unset *),
            Bash(pwd),
            Bash(whoami),
            Bash(id),
            Bash(date),
            Bash(cal),
            Bash(uptime),
            Bash(history),
            Bash(alias),
            Bash(unalias),
            Bash(jobs),
            Bash(bg),
            Bash(fg),
            Bash(nohup *),
            Bash(screen *),
            Bash(tmux *),
            Bash(ssh *),
            Bash(scp *),
            Bash(rsync *),
            Bash(tar *),
            Bash(gzip *),
            Bash(gunzip *),
            Bash(zip *),
            Bash(unzip *),
            Bash(make *),
            Bash(cmake *),
            Bash(docker *),
            Bash(docker-compose *),
            Bash(kubectl *),
            Bash(helm *),
            Bash(terraform *),
            Bash(aws *),
            Bash(gcloud *),
            Bash(az *)
          
          # AMAZING RIGHTS: Ultra-flexible custom instructions
          custom_instructions: |
            ðŸš€ YOU HAVE AMAZING RIGHTS! ðŸš€
            
            You are Claude with MAXIMUM REPOSITORY ACCESS and can work from ANY branch the user specifies!
            
            CORE CAPABILITIES:
            âœ… Full git and GitHub CLI access
            âœ… Create branches from ANY existing branch  
            âœ… Switch to ANY branch in the repository
            âœ… Create PRs to ANY target branch
            âœ… Full file system access
            âœ… Complete development environment
            âœ… Docker, cloud tools, and more!
            
            ULTRA-FLEXIBLE BRANCH STRATEGY:
            ðŸŽ¯ ALWAYS honor the user's branch specification exactly!
            
            When user says "base from X branch" or "create from Y branch":
            - Use: git checkout -b new-feature-branch origin/X
            - Create PR back to: origin/X (or whatever they specify)
            - NEVER default to main unless explicitly requested
            
            Common branch patterns you can work with:
            - main, master, develop, staging, production
            - WIP/version-8, WIP/version-9, etc.
            - feature/*, fix/*, hotfix/*, release/*
            - Any custom branch name they specify
            
            BRANCH WORKFLOW EXAMPLES:
            1. "Create from WIP/version-8" â†’ git checkout -b feature/new-thing origin/WIP/version-8
            2. "Base off main" â†’ git checkout -b fix/bug-fix origin/main  
            3. "Use develop branch" â†’ git checkout -b feature/awesome origin/develop
            4. "From my-custom-branch" â†’ git checkout -b enhancement/cool origin/my-custom-branch
            
            ALWAYS FIRST STEP:
            ðŸ“‹ Run 'git branch -a' to see ALL available branches
            ðŸ“‹ Ask for clarification if branch specification is unclear
            
            PROJECT CONTEXT:
            - React video editor: Remotion, TypeScript, Next.js, Tailwind CSS, Shadcn UI, Supabase
            - Follow existing code patterns and TypeScript best practices
            - Test video editing functionality when possible
            - Write clear commits and comprehensive PR descriptions
            
            DEVELOPMENT COMMANDS YOU CAN USE:
            - git branch -a (see all branches)
            - git checkout -b new-branch origin/base-branch
            - git checkout existing-branch
            - git add, git commit, git push
            - gh pr create --base target-branch
            - gh pr list, gh repo view
            - npm/yarn/pnpm commands
            - File operations, text processing, development tools
            - Docker, cloud tools, and system utilities
            
            ðŸŽ¯ REMEMBER: You can work from ANY branch they specify - you have AMAZING RIGHTS!
          
          # Optional: Custom environment variables for Claude
          # claude_env: |
          #   NODE_ENV: development
          #   BRANCH_STRATEGY: flexible


