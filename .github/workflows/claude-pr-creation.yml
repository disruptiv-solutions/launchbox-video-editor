name: Claude PR Creation

on:
  issue_comment:
    types: [created]
  issues:
    types: [opened, assigned]

jobs:
  claude-pr:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude-pr')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude-pr') || contains(github.event.issue.title, '@claude-pr')))
    runs-on: ubuntu-latest
    permissions:
      contents: write          # Required to create branches and commits
      pull-requests: write     # Required to create PRs
      issues: write           # Required to comment on issues
      id-token: write
      actions: read           # Required for Claude to read CI results
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history to access all branches
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "claude-bot[bot]"
          git config --global user.email "claude-bot[bot]@users.noreply.github.com"

      - name: Run Claude Code for PR Creation
        id: claude-pr
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Custom instructions for PR creation workflow
          custom_instructions: |
            You are Claude, an AI assistant specialized in creating pull requests and working with Git branches.
            
            You have comprehensive git and GitHub CLI capabilities:
            - Access to all branches in the repository (use 'git branch -a' to see them)
            - Create new branches from any existing branch
            - Make commits and push changes
            - Create pull requests to any target branch
            - Switch between branches and work on different versions
            
            Branch Strategy for this React Video Editor:
            - WIP/version-8 is the active development branch for version 8 features
            - Use 'git checkout -b feature/[feature-name] origin/WIP/version-8' to create feature branches from version 8
            - Create PRs back to WIP/version-8 for version 8 features
            - Use descriptive branch names with prefixes like feature/, fix/, chore/
            - Always check available branches with 'git branch -a' first
            
            Development Guidelines:
            - Write clear commit messages and comprehensive PR descriptions
            - Consider the target branch (don't default to main unless specified)
            - Ensure all new React components use TypeScript
            - Follow React best practices and hooks patterns
            - Test changes when possible
            
            Available commands include:
            - git branch -a (to see all branches)
            - git checkout -b new-branch existing-branch (to create from specific branch)
            - git checkout branch-name (to switch to existing branch)
            - git add, git commit, git push
            - gh pr create (to create PRs)
            - gh pr list (to see existing PRs)
            - gh repo view (to see repo info)
            
            Project context:
            - This is a React video editor built with Remotion, TypeScript, Next.js, Tailwind, Shadcn UI, and Supabase
            - Follow existing code patterns and conventions
            - Ensure TypeScript types are properly defined

          # Comprehensive tools for git operations and GitHub CLI
          allowed_tools: |
            Bash(git *),
            Bash(gh *),
            Bash(npm *),
            Bash(yarn *),
            Bash(pnpm *),
            Bash(npx *),
            Bash(node *),
            Bash(ls *),
            Bash(cat *),
            Bash(echo *),
            Bash(mkdir *),
            Bash(cp *),
            Bash(mv *),
            Bash(find *),
            Bash(grep *),
            Bash(sed *),
            Bash(awk *),
            Bash(sort *),
            Bash(uniq *),
            Bash(head *),
            Bash(tail *),
            Bash(wc *),
            Bash(chmod *),
            Bash(touch *),
            Bash(which *),
            Bash(pwd),
            Bash(whoami)

          # Optional: Specify model
          # model: "claude-opus-4-20250514" 